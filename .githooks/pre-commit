#!/usr/bin/env bash

# Git pre-commit hook to check staged Python files for formatting issues
# with yapf and flake8.  This requires that yapf and flake8 are
# installed and runnable in the environment running the pre-commit hook.

set -euo pipefail

# When running, this first checks for unstaged changes to staged files,
# and if there are any, it will exit with an error. Files with unstaged
# changes will be printed.  If all staged files have no unstaged
# changes, it will run yapf against them, leaving the formatting changes
# unstaged. Changed files will be printed.
#
# BUGS: This does not leave staged changes alone when used with the -a
# flag to git commit, due to the fact that git stages ALL unstaged files
# when that flag is used.

# Find all staged Python files, and exit early if there aren't any.
PYTHON_FILES=()
while IFS=$'\n' read -r line; do PYTHON_FILES+=("$line"); done \
  < <(git diff --name-only --cached --diff-filter=AM | grep --color=never '.py$')
if [ ${#PYTHON_FILES[@]} -eq 0 ]; then
  exit 0
fi

# Verify that yapf is installed; if not, warn and exit.
if ! command -v yapf >/dev/null; then
  echo 'yapf not on path; can not format. Please install yapf:'
  echo '    pip install yapf'
  exit 2
fi

# Verify that isort is installed; if not, warn and exit.
if ! command -v isort >/dev/null; then
  echo 'isort not on path; can not format. Please install isort:'
  echo '    pip install isort'
  exit 2
fi

# Check for unstaged changes to files in the index.
CHANGED_FILES=()
while IFS=$'\n' read -r line; do CHANGED_FILES+=("$line"); done \
  < <(git diff --name-only "${PYTHON_FILES[@]}")
if [ ${#CHANGED_FILES[@]} -gt 0 ]; then
  echo 'You have unstaged changes to some files in your commit; skipping '
  echo 'auto-format. Please stage, stash, or revert these changes. You may '
  echo 'find `git stash -k` helpful here.'
  echo 'Files with unstaged changes:' "${CHANGED_FILES[@]}"
  exit 1
fi

# Format all staged files, then exit with an error code if any have
# uncommitted changes.
echo 'Formatting staged Python files with YAPF . . .'
yapf --in-place --recursive --verbose "${PYTHON_FILES[@]}"
echo 'Ordering import statements with isort . . .'
isort "${PYTHON_FILES[@]}"

CHANGED_FILES=()
while IFS=$'\n' read -r line; do CHANGED_FILES+=("$line"); done \
  < <(git diff --name-only "${PYTHON_FILES[@]}")
if [ ${#CHANGED_FILES[@]} -gt 0 ]; then
  echo '----'
  echo 'Reformatted staged files. Please review and stage the changes.'
  echo 'Files updated: ' "${CHANGED_FILES[@]}"
  echo '----'
  echo 'Checking staged Python files with Flake8 . . .'
  flake8 --doctests "${PYTHON_FILES[@]}"
  exit 1
else
  echo 'Checking staged Python files with Flake8 . . .'
  flake8 --doctests "${PYTHON_FILES[@]}"
fi
